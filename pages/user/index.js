import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { app, database } from "../firebaseConfig";
import {
  collection,
  addDoc,
  getDocs,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { useRouter } from "next/router";
export default function User() {
  const [ID, setID] = useState(null);
  const [doing, setDoing] = useState("");
  const [fireData, setFireData] = useState([]);
  const [isUpdate, setIsUpdate] = useState(false);
  const databaseRef = collection(database, "To Do List");
  let router = useRouter();
  useEffect(() => {
    let token = sessionStorage.getItem("Token");
    if (token) {
      getData();
    }
    if (!token) {
      router.push("/register");
    }
  }, []);

  const addData = () => {
    addDoc(databaseRef, {
      doing: doing,
    })
      .then(() => {
        alert("Data Sent");
        getData();
        setDoing("");
      })
      .catch((err) => {
        console.error(err);
      });
  };

  const getData = async () => {
    await getDocs(databaseRef).then((response) => {
      setFireData(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  const getID = (id, doing) => {
    setID(id);
    setDoing(doing);
    setIsUpdate(true);
  };

  const updateFields = () => {
    let fieldToEdit = doc(database, "To Do List", ID);
    updateDoc(fieldToEdit, {
      doing: doing,
    })
      .then(() => {
        alert("Data Updated");
        getData();
        setDoing("");
        setIsUpdate(false);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const deleteDocument = (id) => {
    let fieldToEdit = doc(database, "To Do List", id);
    deleteDoc(fieldToEdit)
      .then(() => {
        alert("Data Deleted");
        getData();
      })
      .catch((err) => {
        alert("Cannot Delete that field..");
      });
  };

  const logout = () => {
    sessionStorage.removeItem("Token");
    router.push("/register");
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>To Do Listing App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <button onClick={logout}>Log Out</button>
        </div>
        <h1>Home</h1>
        <input
          placeholder="doing"
          className={styles.inputBox}
          type="text"
          value={doing}
          onChange={(event) => setDoing(event.target.value)}
        />

        {isUpdate ? (
          <button className={styles.button} onClick={updateFields}>
            UPDATE
          </button>
        ) : (
          <button className={styles.button} onClick={addData}>
            ADD
          </button>
        )}

        <div>
          {fireData.map((data) => {
            return (
              <div className={styles.flex}>
                <h3>Name: {data.doing}</h3>
                <button
                  className={styles.button}
                  onClick={() => getID(data.id, data.doing)}
                >
                  Update
                </button>
                <button
                  className={styles.button}
                  onClick={() => deleteDocument(data.id)}
                >
                  Delete
                </button>
              </div>
            );
          })}
        </div>
      </main>
    </div>
  );
}
